
当两个 singleton 作用域 Bean 存在依赖关系时，或当 prototype 作用域 Bean 依赖 singleton 作用域 Bean 时，通过属性定义依赖关系就足够了。
但当 singleton 作用域 Bean 依赖 prototype 作用域 Bean 时，singleton Bean 只有一次初始化的机会，它的依赖关系也只在初始化阶段被设置，
它所依赖的 prototype Bean 则需要每次都得到一个全新的实例，这将导致 singleton Bean 的依赖得不到即时更新，而始终都是调用同一个 prototype Bean 实例，
这就违背了设置 prototype Bean 的初衷：本来希望它具有 prototype 行为，但实际上它却表现出 singleton 行为了。

解决上述问题有两种方法：
1，部分放弃依赖注入
singleton Bean 每次需要 prototype Bean 时，主动向容器请求新的 Bean 实例。这样一来会导致代码与Spring API耦合，造成代码污染。
2，利用方法注入
方法注入通常使用 lookup 方法注入，利用它可以让 Spring 容器重写其中 Bean 的抽象或具体方法，返回查找容器中其他 Bean 的结果，
被查找的 Bean 通常是一个非 singleton Bean（尽管也可以是一个 singleton ）。
Spring 通过使用 cglib 库修改客户端类的字节码，从而实现了上述功能。
