
JPA 是基于 POJO 的持久化机制，从 Hibernate 和 JDO 上借鉴了很多理念并加入了注解的特性，是下一代 Java 持久化标准。
Spring 支持 JPA 后，很多开发人员都推荐在基于 Spring 的应用程序中使用 JPA 实现持久化。

在 Spring 中使用 JPA 的第一步是要在 Spring 应用上下文中将实体管理器工厂（EntityManagerFactory）按照 Bean 的形式来进行配置。
基于 JPA 的应用程序使用 EntityManagerFactory 的实现类来获取 EntityManager 实例。JPA 定义了两种类型的实体管理器：

应用程序管理类型（Application-managed）

当应用程序向实体管理器工厂直接请求实体管理器时，工厂会创建一个实体管理器。
在这种模式下，程序要自己负责打开或关闭实体管理器并在事务中对其进行控制。

容器管理类型（Container-managed）

实体管理器由 JavaEE 容器创建和管理，应用程序根本不与实体管理器工厂打交道。
相反，实体管理器直接通过注入或 JNDI 来获取。容器负责配置实体管理器工厂。
这种类型的实体管理器最适合用于 JavaEE 容器，在这种情况下会希望在 persistence.xml
指定的 JPA 配置之外保持一些自己对 JPA 的控制。


不管使用哪种 EntityManagerFactory，Spring 都会负责管理 EntityManager。
如果使用的是 Application-managed 类型，Spring 承担了应用程序的角色并以透明的方式处理 EntityManager。
在容器管理的场景下，Spring 会担当容器的角色。使用这两种类型唯一值得关注的区别是，在 Spring 应用上下文中如何进行配置。