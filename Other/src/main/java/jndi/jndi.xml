<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
               http://www.springframework.org/schema/jee
               http://www.springframework.org/schema/jee/spring-jee-4.1.xsd">
               
	<!--
	Spring 的 jee 命名空间提供了以松耦合的方式使用 JNDI 的方法。使用 <jee:jndi-lookup> 元素装配 JNDI 对象：

	jndi-name：指定了 JNDI 中对象的名称。
	resource-ref：设置为 true 则在 JavaEE 容器中查找时无需添加 java:comp/env/ 前缀。
	cache：默认情况下，会缓存从 JNDI 获取的对象。如果从 JNDI 获取的对象会频繁改变，可以将缓存关闭。
	lookup-on-startup：默认情况下，当应用程序启动的时候就会从 JNDI 中获取对象，可以将该属性设为 false 实现懒加载获取对象。
	proxy-interface：鉴于 JNDI 获取的对象可以随时改变，没办法知道对象的实际类型，可以通过该属性指定希望从 JNDI 中获取对象的类型。
	default-ref：当请求对象无法在 JNDI 中获取的时候，可以配置该属性指定预备对象作为替代。
				这确保了在生产环境中数据源始终是在 JNDI 获取的，同时又能在开发环境中明确地进行配置。
	-->
	<jee:jndi-lookup id="dataSource"
					 jndi-name="jdbc/ds"
					 cache="true"
					 resource-ref="true"
					 lookup-on-startup="false"
					 expected-type="javax.sql.DataSource"
					 proxy-interface="javax.sql.DataSource"
					 default-ref="devDataSource"
	/>

	<!--
	<jee:jndi-lookup> 查找位于 JNDI 中的对象，使其可以在 Spring 应用上下文中以 Bean 的形式使用。
	这样，它就能够注入到任何依赖它的对象中。
	-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="devDataSource" lazy-init="true" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/test" />
		<property name="username" value="root" />
		<property name="password" value="woailo99" />
	</bean>
</beans>