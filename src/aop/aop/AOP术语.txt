
切面（Aspect）：
业务流程运行的某个特定步骤，也就是应用运行过程的关注点，关注点可能横切多个对象。

连接点（Joinpoint）：
程序执行过程中明确的点，如方法的调用，或者异常的抛出。

增强处理（Advice）：
AOP框架在特定的切入点执行的增强处理，比如“aroud”、“before”、“after”等类型。

切入点（Pointcut）：
可以插入增强处理的连接点。当某个连接点满足指定要求时，该连接点将被添加增强处理，然后变为切入点。


引入：将方法或字段添加到被处理的类中。Spring允许引入新的接口到任何被处理的对象。

目标对象：
被AOP框架进行增强处理的对象，也被称为被增强的对象。如果AOP框架是通过运行时代理来实现的，那么这个对象将是一个被代理的对象。

AOP代理：
AOP框架创建的对象，也就是对目标对象的加强。Spring中的AOP代理既可以是JDK动态代理，也可以是CGLIB代理。
前者为实现接口的目标对象的代理，后者为不实现接口的目标对象的代理。

织入（Weaving）：
将增强处理添加到目标对象中，并创建一个被增强的对象（AOP代理）的过程就是织入。
织入有两种实现方式：编译时织入（如AspectJ）和运行时织入（如CGLIB）。Spring是在运行时完成织入。


AOP代理其实是由AOP框架动态生成的一个代理对象，该代理可作为目标对象使用，它包含了目标对象的全部方法，
但代理中的方法与目标对象的方法存在差异：AOP方法在特定切入点添加了增强处理，并回调了目标对象的方法。

