
事务的ACID特性：

原子性（atomic）
事务由一个或多个行为捆绑在一起组成，好像是一个单独的工作单元。原子性确保在事务中的所有操作要么都发生，要么都不发生。
如果所有的行为都成功了，那么事务就是成功的；如果任何一个行为失败了，那么整个事务就失败了，并且被回滚。

一致性（consistent）
一旦一个事务结束了（不管成功与否），系统所处的状态和它的业务规则是一致的。也就是说，数据应当不会被破坏。

隔离性（isolated）
事务应该允许多名用户操作同一数据，一名用户的操作不会和其他用户的操作相混淆。隔离通常意味着要锁定数据库里的记录行或表。

持久性（durable）
一旦事务完成，事务的结果应该持久化，这样不管是系统崩溃还是别的原因，它们都将一直存在。


JavaEE应用的传统事务有两种策略：全局事务和局部事务。全局事务由应用服务器管理，需要服务器的JTA支持。
局部事务和底层所采用的持久化技术有关，当采用JDBC时，需要使用Connection对象来操作事务；当采用Hibernate时，需要使用Session对象来操作事务。

全局事务可以跨多个事务性的资源（比如多个数据库）；局部事务不需要应用服务器参与事务管理，因此不能保证跨多个事务性资源的事务正确性。